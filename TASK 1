class Book:
    def _init_(self, book_id, title, author, genre, copies):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.genre = genre
        self.copies = copies
        self.issued_copies = 0

    def _str_(self):
        return f"ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Genre: {self.genre}, Available Copies: {self.copies - self.issued_copies}"


class Library:
    def _init_(self):
        self.books = {}
        self.issued_books = {}

    def add_book(self, book):
        if book.book_id in self.books:
            print("Book ID already exists. Updating existing book.")
            self.books[book.book_id].copies += book.copies
        else:
            self.books[book.book_id] = book
        print(f"Book '{book.title}' added/updated successfully.")

    def display_books(self):
        if not self.books:
            print("No books available in the library.")
        else:
            print("\nAvailable Books in the Library:")
            for book in self.books.values():
                print(book)

    def issue_book(self, book_id, user):
        if book_id not in self.books:
            print(f"Book with ID {book_id} does not exist.")
        else:
            book = self.books[book_id]
            if book.copies - book.issued_copies > 0:
                book.issued_copies += 1
                self.issued_books[(book_id, user)] = book
                print(f"Book '{book.title}' issued to {user}.")
            else:
                print(f"Book '{book.title}' is currently out of stock.")

    def return_book(self, book_id, user):
        if (book_id, user) not in self.issued_books:
            print(f"Book with ID {book_id} was not issued to {user}.")
        else:
            book = self.books[book_id]
            book.issued_copies -= 1
            del self.issued_books[(book_id, user)]
            print(f"Book '{book.title}' returned by {user}.")

    def search_book(self, search_term):
        found_books = []
        for book in self.books.values():
            if search_term.lower() in book.title.lower() or search_term.lower() in book.author.lower():
                found_books.append(book)

        if found_books:
            print(f"Books matching '{search_term}':")
            for book in found_books:
                print(book)
        else:
            print(f"No books found matching '{search_term}'.")


def main_menu():
    library = Library()

    while True:
        print("\nLibrary Management System")
        print("1. Add Book")
        print("2. Display Available Books")
        print("3. Issue Book")
        print("4. Return Book")
        print("5. Search for a Book")
        print("6. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            book_id = input("Enter Book ID: ")
            title = input("Enter Book Title: ")
            author = input("Enter Book Author: ")
            genre = input("Enter Book Genre: ")
            copies = int(input("Enter number of copies: "))
            book = Book(book_id, title, author, genre, copies)
            library.add_book(book)

        elif choice == '2':
            library.display_books()

        elif choice == '3':
            book_id = input("Enter Book ID to issue: ")
            user = input("Enter user name: ")
            library.issue_book(book_id, user)

        elif choice == '4':
            book_id = input("Enter Book ID to return: ")
            user = input("Enter user name: ")
            library.return_book(book_id, user)

        elif choice == '5':
            search_term = input("Enter book title or author to search: ")
            library.search_book(search_term)

        elif choice == '6':
            print("Exiting the Library Management System.")
            break

        else:
            print("Invalid choice. Please try again.")


if _name_ == "_main_":
    main_menu()
